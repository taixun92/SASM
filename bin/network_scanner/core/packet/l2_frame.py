# -*- coding: utf-8 -*-
# 
# Script : network_scanner/core/controller/packet/l2_frame.py
# Author : Hoon
# 
# ====================== Comments ======================
#  
#  Ethernet II Frame Format
#  
#  0                   1                   2                   3
#  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#  |                  <-- Destination MAC Address                  |
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#  |  Destination MAC Address -->  |    <-- Source MAC Address     |
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#  |                     Source MAC Address -->                    |
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#  |             Type              |
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#  
#  
#  

'''
스크립트 기능:

이 스크립트에 포함된 L2_Frame 클래스를 이용하여 이더넷 프레임을 만들 수 있다.

ex)
방법 1.
L2_Frame( b'\x08\x00\x27\xcf\xc6\xe0\x0a\x00\x27\x00\x00\x05\x08\x00' )

방법 2. 

p_info = {
        'l2': {
              'dst_mac' : '08:00:27:CF:C6:e0'
            , 'src_mac' : '0A-00-27-00-00-05'
            , 'type'    : 'ipv4'
        }
    }

L2_Frame( p_info )

'''


# Python Libraries
from struct import pack, unpack
from copy   import deepcopy
from re     import sub as re_sub

# Module Libraries
from utils import readable_mac

class L2_Frame:
    """
    Ethernet ver.2 Frame 생성위한 클래스
    """

    TYPE = {
          0x0800 : 'IPv4'
        , 0x0842 : 'Wake-on-LAN'
        , 0x0806 : 'ARP'
        , 0x8035 : 'RARP'
        , 0x8191 : 'NetBIOS'
        , 0x86dd : 'IPv6'
    }

    def __init__( self, raw ):
        self._dict = {}
        self._info = {}
        
        ##################################################################################################################################
        # 인자(raw변수)가 바이너리일 경우 dict로 변환
        ##################################################################################################################################
        if isinstance( raw, bytes ):
            self.raw = raw

            #########################################################################################################################
            # 이더넷 프레임의 크기(14byte)만큼 패킷을 슬라이싱 한다.
            #########################################################################################################################
            l2_raw   = raw[ :14 ]

            #########################################################################################################################
            # '!'는 네트워크 통신을 위한 빅엔디안 형식을 의미. https://docs.python.org/ko/3/library/struct.html 포맷문자열 참고
            #########################################################################################################################
            dst_mac_raw, src_mac_raw, type = unpack( '!6s6sH', l2_raw )
            
            #########################################################################################################################
            # l2_frame의 정보를 담을 dict 변수
            #########################################################################################################################
            self._dict[ 'l2' ] = {
                  'dst_mac' : dst_mac_raw
                , 'src_mac' : src_mac_raw
                , 'type'    : type
            }
        
            #########################################################################################################################
            # raw형식으로 기록된 _dict['l2']의 내용을 읽기 쉬운 형식으로 변환.
            #########################################################################################################################
            self._info[ 'l2' ] = self.to_info( self._dict[ 'l2' ] )

        ##################################################################################################################################
        # raw변수가 dict 일 경우
        ##################################################################################################################################
        elif isinstance( raw, dict ):
            self._dict[ 'l2' ] = self.to_dict( raw[ 'l2' ]        )
            self._info[ 'l2' ] = self.to_info( self._dict[ 'l2' ] )
            self.raw           = pack(
                  '!6s6sH'
                , self._dict[ 'l2' ][ 'dst_mac' ]
                , self._dict[ 'l2' ][ 'src_mac' ]
                , self._dict[ 'l2' ][ 'type' ]
            )

        ##################################################################################################################################
        # 프레임 형식이 잘못된 경우 에러 발생
        ##################################################################################################################################
        else:
            raise ValueError( 'Unsupported type of raw.' )
        
    def to_dict( self, dic ):
        """
        dict변수에 저장 된 ethernet frame 정보의 형식이 매번 다르더라도 인식하도록 변환
        ex) xx:xx:xx:xx:xx:xx으로 표기하던 xx-xx-xx-xx-xx-xx으로 표기하던 인식가능
        """

        for key in ( raw_dict := deepcopy( dic ) ).keys():
            
            if key.endswith( '_mac' ):
                
                if isinstance( raw_dict[ key ], bytes ):
                    pass

                ##################################################################################################################################
                # value를 6byte크기, 빅엔디안 형식으로 변환
                ##################################################################################################################################
                elif isinstance( raw_dict[ key ], int ):
                    raw_dict[ key ] = raw_dict[ key ].to_bytes( 6, 'big' )

                ##################################################################################################################################
                # 정규표현식을 이용하여 value값에 : 또는 -가 포함되어있을 경우 제거하고 바이너리로 변환
                ##################################################################################################################################
                elif isinstance( raw_dict[ key ], str ):
                    raw_dict[ key ] = bytes.fromhex( re_sub( r'(:|-)', '', raw_dict[ key ] ) )

                ##################################################################################################################################
                # 프레임 형식이 잘못된 경우 에러 발생
                ##################################################################################################################################
                else:
                    raise TypeError( f"Unsupported type of { key }." )
            
            elif key == 'type':
                
                if isinstance( raw_dict[ key ], bytes ):
                    raw_dict[ key ] = int.from_bytes( raw_dict[ key ], 'big' )

                elif isinstance( raw_dict[ key ], int ):
                    pass

                elif isinstance( raw_dict[ key ], str ):
                    name            = raw_dict[ key ]
                    raw_dict[ key ] = 0

                    for k, v in self.TYPE.items():
                        if name.lower() == v.lower():
                            raw_dict[ key ] = k
                            break

                    if not raw_dict[ key ]:
                        raise ValueError( f"Unknown { key } name." )
                
                else:
                    raise TypeError( f"Unsupported type of { key }." )

        return raw_dict

    def to_info( self, dic ):
        """
        dict타입의 변수를 복사하여 각각의 key에 대응하는 raw value를 읽기 쉬운 형태로 변환
        """

        for key in ( raw_dict := deepcopy( dic ) ).keys():

            ##################################################################################################################################
            # key이름이 "_mac"으로 끝나면 raw타입 MAC 주소를 문자열로 변환 ex) b"\x08\x00'\xcf\xc6\xe0"  ---> (08:00:27:CF:C6:E0)
            # readable_mac은 l2_frame안에 정의되어 있음
            ##################################################################################################################################
            if key.endswith( '_mac' ):
                raw_dict[ key ] = readable_mac( raw_dict[ key ] )

            ##################################################################################################################################
            # key 이름이 "type"일 경우 int타입으로 표기된 정보를 protocol 이름으로 변환
            ##################################################################################################################################
            elif key == 'type':
                raw_dict[ key ] = self.TYPE[ raw_dict[ key ] ] if raw_dict[ key ] in self.TYPE else raw_dict[ key ]

        return raw_dict